{% extends "base.html.jinja" %} {% block content %}
<div class="items-center justify-center p-2 mx-auto mt-2 max-w-7xl">
  <h1 class="text-2xl text-center">Ava Bot</h1>
  <ol id="chats" class="relative p-2 mt-4 border-gray-200 border-s dark:border-gray-700">
  </ol>

  <div class="flex items-center justify-center px-2 mt-4" x-data="recordingState()">
    <button class="w-16 h-16 text-white rounded-full" @keyup.space.window="toggleRecording()">
      <i class="fa-solid fa-microphone fa-xl"></i>
    </button>
  </div>
  <div id="signals" class="flex items-center justify-center p-2 text-center">
  </div>
</div>


{% endblock %}
{% block script %}
<script lang="javascript">
  let recorder
  let isRecording

  function recordingState() {
    recorder = new Recorder()

    return {
      isRecording: false,
      toggleRecording: function () {
        if (this.isRecording) {
          console.log('stop')
          recorder.stop();
        } else {
          let signals = document.getElementById("signals");
          if (signals) {
            signals.innerHTML = "Recording...";
          }
          console.log('start')
          recorder.start();
        }
        this.isRecording = !this.isRecording;
      }

    }
  }


  document.addEventListener("DOMContentLoaded", function () {

    recorder.init();

    let sse = new EventSource("/events");
    let chats = document.getElementById("chats");
    let signals = document.getElementById("signals");

    sse.addEventListener("signal", (event) => {
      signals.innerHTML = event.data;
    });

    sse.addEventListener("input_skeleton", (event) => {
      console.log("input_skeleton", event);
      chats.insertAdjacentHTML("beforeend", event.data);
      signals.scrollIntoView();
    });

    sse.addEventListener("input", (event) => {
      console.log("input", event);
      let node = document.getElementById(`input-${event.lastEventId}`);
      if (node) {
        node.innerHTML = event.data;
        signals.scrollIntoView();
      }
    });

    sse.addEventListener("reply_skeleton", (event) => {
      console.log("reply_skeleton", event);
      chats.insertAdjacentHTML("beforeend", event.data);
      signals.scrollIntoView();
    });

    sse.addEventListener("reply", (event) => {
      console.log("reply", event);
      let node = document.getElementById(`reply-${event.lastEventId}`);
      if (node) {
        node.innerHTML = event.data;
        signals.scrollIntoView();
      }
    });

    sse.addEventListener("error", (event) => {
      console.log(event);
    });
  });

  class Recorder {
    mediaRecorder;
    recordedChunks = [];

    async init() {
      console.log("the init of Recorder");

      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        this.mediaRecorder = new MediaRecorder(stream);

        this.mediaRecorder.ondataavailable = (event) => {
          if (event.data.size > 0) {
            this.recordedChunks.push(event.data);
          }
        };

        this.mediaRecorder.onstop = async () => {
          const audioBlob = new Blob(this.recordedChunks, { type: 'audio/mp3' });

          const formData = new FormData();
          formData.append('audio', audioBlob);

          fetch(
            '/assistant',
            { method: 'POST', body: formData }
          ).then(async (res) => {
            let data = await res.json();
            console.log("> res:", data);
          });
        };
      } catch (error) {
        console.error('Error accessing microphone:', error.message);
      }
    }

    start() {
      this.recordedChunks = [];
      this.mediaRecorder.start();
    }

    stop() {
      this.mediaRecorder.stop();
    }
  }

</script>
{% endblock %}
